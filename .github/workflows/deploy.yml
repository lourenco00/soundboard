name: Deploy Soundboard to Production

on:
  push:
    branches:
      - main

jobs:
  deploy-soundboard:
    runs-on: ubuntu-latest

    steps:
      - name: ðŸ“¥ Checkout code
        uses: actions/checkout@v3

      - name: ðŸ§° Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: ðŸ“„ Write .env.production
        run: echo "${{ secrets.PROD_ENV_PRODUCTION }}" > .env.production

      - name: ðŸ“¦ Install dependencies and build Soundboard locally
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RESEND_FROM: ${{ secrets.RESEND_FROM }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          NEXT_PUBLIC_STRIPE_PRICE_ID: ${{ secrets.NEXT_PUBLIC_STRIPE_PRICE_ID }}
          NEXT_PUBLIC_PUBLIC_URL: ${{ secrets.NEXT_PUBLIC_PUBLIC_URL }}
        run: |
          npm ci
          npm run build -- --no-lint

      - name: ðŸš€ Deploy Soundboard to Production Droplet
        env:
          HOST: ${{ secrets.DROPLET_HOST }}
          USERNAME: ${{ secrets.DROPLET_USER }}
          PRIVATE_KEY: ${{ secrets.DROPLET_PRIVATE_KEY }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          echo "ðŸ”¹ SSH connection test..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USERNAME@$HOST "echo 'âœ… SSH connected'"

          echo "ðŸ”¹ Prepare prod folder..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USERNAME@$HOST "
            mkdir -p $REMOTE_PATH &&
            sudo chown -R $USERNAME:$USERNAME $REMOTE_PATH
          "

          echo "ðŸ”¹ Upload .next build..."
          rsync -avz --delete \
            -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" \
            .next/ $USERNAME@$HOST:$REMOTE_PATH/.next/

          echo "ðŸ”¹ Upload remaining project files..."
          rsync -avz --exclude=node_modules --exclude=private_key.pem \
            -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" \
            public package.json package-lock.json .env.production \
            $USERNAME@$HOST:$REMOTE_PATH

          echo "ðŸ”¹ Install production deps & restart Soundboard..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USERNAME@$HOST "
            cd $REMOTE_PATH &&
            npm ci --omit=dev &&
            pm2 delete soundboard || true &&
            PORT=3001 pm2 start npm --name soundboard -- run start &&
            pm2 save
          "

      - name: ðŸ§¹ Clean up
        run: rm private_key.pem
