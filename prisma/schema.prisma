// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  passwordHash      String
  emailVerifiedAt   DateTime?
  stripeCustId      String?             @unique
  plan              Plan                @default(FREE)
  samples           Sample[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  VerificationToken VerificationToken[]
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Sample {
  id        String   @id @default(cuid())
  userId    String
  name      String
  path      String // e.g. /uploads/<userId>/<file>
  sizeBytes Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Beat {
  id        String   @id @default(cuid())
  userId    String
  name      String
  bpm       Int      @default(120)
  steps     Int      @default(16)  // number of columns in grid
  pattern   Json                 // { tracks: [{ label, src?, rowIndex, steps: number[] }] }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserSound {
  id         String   @id @default(cuid())
  userId     String
  name       String
  src        String   // e.g. /sounds/user/<uid>/<file>.wav
  kind       String   @default("BEAT") // 'BEAT' or 'SAMPLE'
  durationMs Int
  createdAt  DateTime @default(now())

  @@index([userId])
}


enum Plan {
  FREE
  PRO
}
